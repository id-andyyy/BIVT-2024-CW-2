using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CW2.Var00
{
    public class Program
    {
        static void Main(string[] args)
        {
            #region Task1

            string input_1_1 =
                "1. Значимость этих проблем настолько очевидна, что постоянный количественный рост и сфера нашей активности создаёт предпосылки качественно новых шагов для направлений прогрессивного развития. Равным образом постоянное информационно-техническое обеспечение нашей деятельности требует от нас анализа форм воздействия? Таким образом, сложившаяся структура организации позволяет оценить значение экономической целесообразности принимаемых решений! Таким образом, рамки";
            int output_1_1 = 50;
            var task_1_1 = new Task1(input_1_1);

            string input_1_2 =
                "1пункт. Разнообразный и богатый опыт рамки и место обучения кадров требует определения и уточнения соответствующих условий активизации. Дорогие друзья, реализация намеченного плана развития создаёт предпосылки качественно новых шагов для соответствующих условий активизации! Дорогие друзья, консультация с профессионалами из IT требует определения (и уточнения) существующих финансовых и административных условий. Не следует, однако, забывать о том, что постоянный количественный рост и сфера нашей активности требует от нас системного анализа новых предложений. Разнообразный и богатый опыт консультация с профессионалами из IT обеспечивает широкому кругу специалистов участие в формировании форм воздействия. Практический опыт показывает, что курс на социально-ориентированный национальный проект позволяет оценить значение всесторонне сбалансированных";
            int output_1_2 = 100;
            var task_1_2 = new Task1(input_1_2);
            
            string input_1_3 =
                "Не следует, однако, забыват' о том, – (что) дальнейшее развитие различных форм деятельности позволяет выполнить важнейшие задания по разработке существующих финансовых и административных условий... (С другой стороны рамки и место обучения кадров позволяет выполнить важнейшие задания по разработке всесторонне сбалансированных нововведений!) Практический опыт показывает, что выбранный нами инновационный путь требует определения и уточнения форм воздействия. Соображения высшего порядка, а также сложившаяся структура организации позволяет оценить значение всесторонне сбалансированных нововведений! Повседневная практика показывает, что рамки и место обучения кадров требует от нас системного анализа форм воздействия. Повседневная практика показывает, что реализация намеченного плана развития напрямую зависит от системы обучения кадров, соответствующей насущным потребностям! Практический опыт показывает, что дальнейшее развитие различных форм деятельности обеспечивает актуальность модели развития. Разнообразный и богатый опыт консультация с профессионалами из IT способствует повышению актуальности соответствующих условий активизации. С другой стороны консультация с профессионалами из IT позволяет оценить значение позиций, занимаемых участниками в отношении поставленных задач. Не следует, однако, забывать о том, что постоянное информационно-техническое обеспечение нашей деятельности позволяет оценить значение дальнейших направлений развития проекта. Значимость этих проблем настолько очевидна, что курс на социально-ориентированный национальный проект требует от нас системного анализа направлений прогрессивного развития?Практический опыт показывает, что постоянный количественный рост и сфера нашей активности способствует повышению актуальности экономической";
            int output_1_3 = 200;
            var task_1_3 = new Task1(input_1_3);

            if (task_1_1.Output != output_1_1)
            {
                Print("Task_1_1", task_1_1.Output, output_1_1);
            }
            else if (task_1_2.Output != output_1_2)
            {
                Print("Task_1_2", task_1_2.Output, output_1_2);
            }
            else if (task_1_3.Output != output_1_3)
            {
                Print("Task_1_3", task_1_3.Output, output_1_3);
            }
            else
            {
                Print("Task_1");
            }

            #endregion
            
            #region Task2

            string input_2_1 =
                "Привет (это) тестовый текст! Он содержит разные знаки препинания: точку, запятую, восклицательный и вопросительный знаки? Ты тоже [увидишь] здесь кавычки и скобки {разных} видов. Самое длинное предложение здесь состоит ровно из тринадцати слов – проверь и убедись сам! Остальные предложения короче; они используют /разные/ знаки. Этот текст [идеален] для проверки. Всё просто, но функционально! Как тебе такое? Надеюсь (что) всё правильно.";
            int output_2_1 = 13;
            var task_2_1 = new Task2(input_2_1);

            string input_2_2 =
                "Практический. опыт. показывает. что. выбранный. нами. инновационный. путь. требует. определения. и. уточнения. системы. обучения. кадров., соответствующей. насущным! потребностям!. Таким!! образом??, постоянный!? количественный. рост? и? сфера? нашей! активности! обеспечивает! актуальность? новых? предложений!! Разнообразный? и? богатый? опыт. постоянный. количественный? рост? и? сфера? нашей? активности? требует? от? нас? анализа? системы? обучения? кадров?,? соответствующей...";
            int output_2_2 = 1;
            var task_2_2 = new Task2(input_2_2);
            
            string input_2_3 =
                "Практический. опыт. показывает. что. выбранный. нами. инновационный. путь. требует. определения. и. уточнения. системы. обучения. кадров., соответствующей. насущным – потребностям!. Таким!! образом??, постоянный!? количественный. рост? и? сфера? нашей! активности! обеспечивает! актуальность? новых? предложений!! Разнообразный? и? богатый? опыт. постоянный. количественный? рост? и? сфера? нашей? активности? требует? от? нас? анализа? системы? обучения? кадров?,? соответствующей...";
            int output_2_3 = 2;
            var task_2_3 = new Task2(input_2_3);

            if (task_2_1.Output != output_2_1)
            {
                Print("Task_2_1", task_2_1.Output, output_2_1);
            }
            else if (task_2_2.Output != output_2_2)
            {
                Print("Task_2_2", task_2_2.Output, output_2_2);
            }
            else if (task_2_3.Output != output_2_3)
            {
                Print("Task_2_3", task_2_3.Output, output_2_3);
            }
            else
            {
                Print("Task_2");
            }

            #endregion
            
            #region Task3

            string pathToMyDocuments = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            string pathToDesktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string task_3_fileName = "task_3_1.txt";
            string pathToFile1 = Path.Combine(pathToMyDocuments, task_3_fileName);
            string pathToFile2 = Path.Combine(pathToDesktop, task_3_fileName);
            
            var task_3 = new Task3(task_3_fileName);
            task_3.Copy(pathToDesktop);
            
            if (!File.Exists(pathToFile1))
            {
                Print("Task_3_1", "Файл не создается");
            }
            else if (!File.Exists(pathToFile2))
            {
                Print("Task_3_2", "Файл не копируется");
            } else if (File.ReadAllText(pathToFile1) != File.ReadAllText(pathToFile2))
            {
                Print("Task_3_3", "Содержимое файлов не совпадает");
            }
            else
            {
                Print("Task_3");
            }

            #endregion

            #region Task4

            var task_4 = new Task4();
            
            task_4.Serialize(task_1_1, task_3);
            var output_4_1 = task_4.Deserialize(task_3);
            
            task_4.Serialize(task_1_2, task_3);
            var output_4_2 = task_4.Deserialize(task_3);
            
            task_4.Serialize(task_1_3, task_3);
            var output_4_3 = task_4.Deserialize(task_3);
            
            if (output_4_1.Input != input_1_1 || output_4_1.Output != output_1_1)
            {
                Print("Task_4_1", output_4_1.Output, output_1_1);
            }
            else if (output_4_2.Input != input_1_2 || output_4_2.Output != output_1_2)
            {
                Print("Task_4_2", output_4_2.Output, output_1_2);
            }
            else if (output_4_3.Input != input_1_3 || output_4_3.Output != output_1_3)
            {
                Print("Task_4_3", output_4_3.Output, output_1_3);
            }
            else
            {
                Print("Task_4");
            }

            #endregion
        }

        #region Print

        public static void Print(string title, string task, string answer)
        {
            Console.WriteLine($"********************* {title} FAIL **********************\n");
            Console.WriteLine($"Your answer: {task}");
            Console.WriteLine($"Right answer: {answer}");
            Console.WriteLine();
        }

        public static void Print(string title, int task, int answer)
        {
            Console.WriteLine($"********************* {title} FAIL **********************\n");
            Console.WriteLine($"Your answer: {task}");
            Console.WriteLine($"Right answer: {answer}");
            Console.WriteLine();
        }

        public static void Print(string title, string message)
        {
            Console.WriteLine($"********************* {title} FAIL **********************\n");
            Console.WriteLine($"Error: {message}");
            Console.WriteLine();
        }

        public static void Print(string title)
        {
            Console.WriteLine($"********************* {title} SUCCESS *********************\n");
        }

        #endregion
    }
}